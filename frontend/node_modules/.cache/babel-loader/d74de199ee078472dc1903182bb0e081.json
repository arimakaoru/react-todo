{"ast":null,"code":"import _classCallCheck from \"/Users/kaoru/prg/react-todo/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kaoru/prg/react-todo/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kaoru/prg/react-todo/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kaoru/prg/react-todo/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kaoru/prg/react-todo/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/kaoru/prg/react-todo/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/kaoru/prg/react-todo/frontend/src/components/Todo.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport '../css/style.css';\nimport Form from './Form.js';\nimport List from './List.js';\n\nvar Todo =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Todo, _React$Component);\n\n  function Todo(props) {\n    var _this;\n\n    _classCallCheck(this, Todo);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Todo).call(this, props));\n    _this.state = {\n      todoList: []\n    };\n    _this.addTodo = _this.addTodo.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.deleteTodo = _this.deleteTodo.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleIsChecked = _this.toggleIsChecked.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleIsDone = _this.toggleIsDone.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Todo, [{\n    key: \"addTodo\",\n    value: function addTodo(todoText) {\n      this.setState({\n        todoList: this.state.todoList.concat({\n          text: todoText,\n          isChecked: false,\n          isDone: false\n        })\n      });\n    }\n  }, {\n    key: \"deleteTodo\",\n    value: function deleteTodo() {\n      this.setState({\n        todoList: this.state.todoList.filter(function (todoObj, index) {\n          return !todoObj.isChecked;\n        })\n      });\n    }\n  }, {\n    key: \"toggleIsChecked\",\n    value: function toggleIsChecked(index) {\n      var newTodoList = this.state.todoList;\n      newTodoList[index].isChecked = !this.state.todoList[index].isChecked;\n      this.setState({\n        todoList: newTodoList\n      });\n    }\n  }, {\n    key: \"toggleIsDone\",\n    value: function toggleIsDone(index) {\n      var newTodoList = this.state.todoList;\n      newTodoList[index].isDone = !this.state.todoList[index].isDone;\n      this.setState({\n        todoList: newTodoList\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"todo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"todo__title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"React ToDo App\"), React.createElement(Form, {\n        addTodo: this.addTodo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"ToDo List\"), React.createElement(List, {\n        todoList: this.state.todoList,\n        deleteTodo: this.deleteTodo,\n        toggleIsChecked: this.toggleIsChecked,\n        toggleIsDone: this.toggleIsDone,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Todo;\n}(React.Component);\n\nexport { Todo as default };","map":{"version":3,"sources":["/Users/kaoru/prg/react-todo/frontend/src/components/Todo.js"],"names":["React","axios","Form","List","Todo","props","state","todoList","addTodo","bind","deleteTodo","toggleIsChecked","toggleIsDone","todoText","setState","concat","text","isChecked","isDone","filter","todoObj","index","newTodoList","Component"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,kBAAP;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;IAEqBC,I;;;;;AACjB,gBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE;AADD,KAAb;AAIA,UAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaC,IAAb,uDAAf;AACA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBD,IAAhB,uDAAlB;AACA,UAAKE,eAAL,GAAuB,MAAKA,eAAL,CAAqBF,IAArB,uDAAvB;AACA,UAAKG,YAAL,GAAoB,MAAKA,YAAL,CAAkBH,IAAlB,uDAApB;AATe;AAUlB;;;;4BAEOI,Q,EAAU;AACd,WAAKC,QAAL,CAAc;AACVP,QAAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC,QAAX,CAAoBQ,MAApB,CAA2B;AACjCC,UAAAA,IAAI,EAAEH,QAD2B;AAEjCI,UAAAA,SAAS,EAAE,KAFsB;AAGjCC,UAAAA,MAAM,EAAE;AAHyB,SAA3B;AADA,OAAd;AAOH;;;iCAEY;AACT,WAAKJ,QAAL,CAAc;AACVP,QAAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC,QAAX,CAAoBY,MAApB,CAA2B,UAACC,OAAD,EAAUC,KAAV,EAAoB;AACrD,iBAAO,CAACD,OAAO,CAACH,SAAhB;AACH,SAFS;AADA,OAAd;AAKH;;;oCAEeI,K,EAAO;AACnB,UAAMC,WAAW,GAAG,KAAKhB,KAAL,CAAWC,QAA/B;AACAe,MAAAA,WAAW,CAACD,KAAD,CAAX,CAAmBJ,SAAnB,GAA+B,CAAC,KAAKX,KAAL,CAAWC,QAAX,CAAoBc,KAApB,EAA2BJ,SAA3D;AACA,WAAKH,QAAL,CAAc;AACVP,QAAAA,QAAQ,EAAEe;AADA,OAAd;AAGH;;;iCAEYD,K,EAAO;AAChB,UAAMC,WAAW,GAAG,KAAKhB,KAAL,CAAWC,QAA/B;AACAe,MAAAA,WAAW,CAACD,KAAD,CAAX,CAAmBH,MAAnB,GAA4B,CAAC,KAAKZ,KAAL,CAAWC,QAAX,CAAoBc,KAApB,EAA2BH,MAAxD;AACA,WAAKJ,QAAL,CAAc;AACVP,QAAAA,QAAQ,EAAEe;AADA,OAAd;AAGH;;;6BAEQ;AACL,aACI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,EAEI,oBAAC,IAAD;AACI,QAAA,OAAO,EAAE,KAAKd,OADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBALJ,EAMI,oBAAC,IAAD;AACI,QAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWC,QADzB;AAEI,QAAA,UAAU,EAAE,KAAKG,UAFrB;AAGI,QAAA,eAAe,EAAE,KAAKC,eAH1B;AAII,QAAA,YAAY,EAAE,KAAKC,YAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,CADJ;AAeH;;;;EA/D6BZ,KAAK,CAACuB,S;;SAAnBnB,I","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nimport '../css/style.css';\nimport Form from './Form.js';\nimport List from './List.js';\n\nexport default class Todo extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            todoList: [],\n        };\n\n        this.addTodo = this.addTodo.bind(this);\n        this.deleteTodo = this.deleteTodo.bind(this);\n        this.toggleIsChecked = this.toggleIsChecked.bind(this);\n        this.toggleIsDone = this.toggleIsDone.bind(this);\n    }\n\n    addTodo(todoText) {\n        this.setState({\n            todoList: this.state.todoList.concat({\n                text: todoText,\n                isChecked: false,\n                isDone: false,\n            }),\n        });\n    }\n\n    deleteTodo() {\n        this.setState({\n            todoList: this.state.todoList.filter((todoObj, index) => {\n                return !todoObj.isChecked;\n            }),\n        });\n    }\n\n    toggleIsChecked(index) {\n        const newTodoList = this.state.todoList;\n        newTodoList[index].isChecked = !this.state.todoList[index].isChecked;\n        this.setState({\n            todoList: newTodoList,\n        });\n    }\n\n    toggleIsDone(index) {\n        const newTodoList = this.state.todoList;\n        newTodoList[index].isDone = !this.state.todoList[index].isDone;\n        this.setState({\n            todoList: newTodoList,\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"todo\">\n                <h1 className=\"todo__title\">React ToDo App</h1>\n                <Form\n                    addTodo={this.addTodo}\n                />\n                <h2>ToDo List</h2>\n                <List\n                    todoList={this.state.todoList}\n                    deleteTodo={this.deleteTodo}\n                    toggleIsChecked={this.toggleIsChecked}\n                    toggleIsDone={this.toggleIsDone}\n                />\n            </div>\n        );\n    }\n\n}"]},"metadata":{},"sourceType":"module"}